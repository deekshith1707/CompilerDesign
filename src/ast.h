#ifndef AST_H
#define AST_H

#ifdef __cplusplus
extern "C" {
#endif

typedef enum NodeType {
    NODE_PROGRAM, NODE_FUNCTION_DEFINITION, NODE_DECLARATION,
    NODE_DECLARATION_SPECIFIERS, NODE_DECLARATOR, NODE_DIRECT_DECLARATOR,
    NODE_POINTER, NODE_PARAMETER_LIST, NODE_PARAMETER_DECLARATION,
    NODE_COMPOUND_STATEMENT, NODE_STATEMENT, NODE_EXPRESSION_STATEMENT,
    NODE_SELECTION_STATEMENT, NODE_ITERATION_STATEMENT, NODE_JUMP_STATEMENT,
    NODE_LABELED_STATEMENT, NODE_EXPRESSION, NODE_ASSIGNMENT_EXPRESSION,
    
    NODE_CONDITIONAL_EXPRESSION, NODE_LOGICAL_OR_EXPRESSION,
    NODE_LOGICAL_AND_EXPRESSION, NODE_INCLUSIVE_OR_EXPRESSION,
    NODE_EXCLUSIVE_OR_EXPRESSION, NODE_AND_EXPRESSION, NODE_EQUALITY_EXPRESSION,
    NODE_RELATIONAL_EXPRESSION, NODE_SHIFT_EXPRESSION, NODE_ADDITIVE_EXPRESSION,
    NODE_MULTIPLICATIVE_EXPRESSION, NODE_CAST_EXPRESSION, NODE_UNARY_EXPRESSION,
    NODE_POSTFIX_EXPRESSION, NODE_PRIMARY_EXPRESSION, NODE_IDENTIFIER,
    NODE_CONSTANT, NODE_INTEGER_CONSTANT, NODE_HEX_CONSTANT, NODE_OCTAL_CONSTANT,
    NODE_BINARY_CONSTANT, NODE_FLOAT_CONSTANT, NODE_CHAR_CONSTANT, NODE_STRING_LITERAL, 
    NODE_TYPE_SPECIFIER, NODE_STORAGE_CLASS_SPECIFIER, NODE_TYPE_QUALIFIER, 
    NODE_STRUCT_SPECIFIER, NODE_ENUM_SPECIFIER, NODE_INITIALIZER, NODE_MARKER, NODE_TYPE_NAME,
    NODE_PREPROCESSOR
} NodeType;

typedef struct TreeNode {
    NodeType type;
    char* value;
    char* dataType;
    int isLValue;
    struct TreeNode** children;
    int childCount;
    int childCapacity;
    int lineNumber;
} TreeNode;

// Function prototypes
TreeNode* createNode(NodeType type, const char* value);
void addChild(TreeNode* parent, TreeNode* child);
void freeNode(TreeNode* node);

#ifdef __cplusplus
}
#endif

#endif // AST_H